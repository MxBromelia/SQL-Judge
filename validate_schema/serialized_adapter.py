""" A Mock for a Database Adapter, used to run tests """
from .adapter import DBAdapter

class SerializedAdapter(DBAdapter):
    """Adapter to a generated serialized schema, that is generated by the validator.
    The Serialized version can be exported to a text file in JSON format and used as caching
    (Not yet implemented)"""
    def __init__(self, tables_info, functions_info=None, procedures_info=None, sequences_info=None):
        self.info = {
            'table': tables_info or {},
            'function': functions_info or [],
            'procedure': procedures_info or [],
            'sequence': sequences_info or []
        }

    def tables(self):
        return list(self.info['table'].keys())

    def columns(self):
        table_columns = ((table, props['columns']) for table, props in self.info['table'].items())
        result = []
        for table, columns in table_columns:
            for cname, ctype in columns.items():
                result.append((table, cname, ctype))
        return result

    def primary_keys(self):
        first_or_none = lambda lst: lst[0] if len(lst) > 0 else None
        return [
            (table, first_or_none(props.get('primary_key', [])))
            for table, props in self.info['table'].items()
            if first_or_none(props.get('primary_key', [])) is not None
        ]

    def _table_entities(self, entity_name):
        table_entities = ((table, props.get(entity_name, {}))
                          for table, props in self.info['table'].items())
        result = []
        for table, entities in table_entities:
            for column, entity in entities.items():
                result.append((table, column, entity))
        return result

    def references(self):
        return self._table_entities('references')

    def indexes(self):
        return self._table_entities('indexes')

    def constraints(self):
        table_constraints = ((table, props.get('constraints', {}))
                             for table, props in self.info['table'].items())
        result = []
        for table, constraints in table_constraints:
            for column, constraint in constraints.items():
                for cname, ctype in constraint.items():
                    result.append((table, column, cname, ctype))
        return result

    def triggers(self):
        return self._table_entities('triggers')

    def functions(self):
        return self.info['function']

    def procedures(self):
        return self.info['procedure']

    def sequences(self):
        return self.info['sequence']
